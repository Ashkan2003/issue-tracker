// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// write npx prisma format to format(prettier) the code
// write npx prisma migrate dev to create and save chages to db
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // the name of the database you use
  url      = env("DATABASE_URL") // we get the url from the env-file-vareables // this url useed to connect the application to db
}

model Issue {
  // name type
  // @id // this means that this value its an id
  // @default // this means that this feild can have a defaul value
  // autoincrement() // evry time a new record assien to db this assien s new value
  // @db // this used for assien a native-db-type to this field
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255) // the default prisma-String-type is varchar(155) but we need to store more chars so we set the varchar to 255
  description String   @db.Text // the default prisma-String-type is varchar(155) but we need to store more chars so we set to text
  status      Status   @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt // with @updatedAt evry time an issue gets updated then this field update

  assignedToUserId String? @db.VarChar(255)
  assignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])
}

enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]
  assignedIssues Issue[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
